// <auto-generated />
using System;
using GraveTracker.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraveTracker.Migrations
{
    [DbContext(typeof(GraveTrackerDbContext))]
    [Migration("20230301152908_ChangeCharacterToSoldier")]
    partial class ChangeCharacterToSoldier
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApprenticeFGArmour", b =>
                {
                    b.Property<int>("ApprenticesApprenticeId")
                        .HasColumnType("int");

                    b.Property<int>("ArmoursID")
                        .HasColumnType("int");

                    b.HasKey("ApprenticesApprenticeId", "ArmoursID");

                    b.HasIndex("ArmoursID");

                    b.ToTable("ApprenticeFGArmour");
                });

            modelBuilder.Entity("ApprenticeFGItem", b =>
                {
                    b.Property<int>("ApprenticesApprenticeId")
                        .HasColumnType("int");

                    b.Property<int>("ItemsID")
                        .HasColumnType("int");

                    b.HasKey("ApprenticesApprenticeId", "ItemsID");

                    b.HasIndex("ItemsID");

                    b.ToTable("ApprenticeFGItem");
                });

            modelBuilder.Entity("ApprenticeFGWeapon", b =>
                {
                    b.Property<int>("ApprenticesApprenticeId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponsID")
                        .HasColumnType("int");

                    b.HasKey("ApprenticesApprenticeId", "WeaponsID");

                    b.HasIndex("WeaponsID");

                    b.ToTable("ApprenticeFGWeapon");
                });

            modelBuilder.Entity("FGArmourSoldier", b =>
                {
                    b.Property<int>("ArmoursID")
                        .HasColumnType("int");

                    b.Property<int>("SoldiersSoldierId")
                        .HasColumnType("int");

                    b.HasKey("ArmoursID", "SoldiersSoldierId");

                    b.HasIndex("SoldiersSoldierId");

                    b.ToTable("FGArmourSoldier");
                });

            modelBuilder.Entity("FGArmourWizard", b =>
                {
                    b.Property<int>("ArmoursID")
                        .HasColumnType("int");

                    b.Property<int>("WizardsWizardId")
                        .HasColumnType("int");

                    b.HasKey("ArmoursID", "WizardsWizardId");

                    b.HasIndex("WizardsWizardId");

                    b.ToTable("FGArmourWizard");
                });

            modelBuilder.Entity("FGCharacterTypeFGItem", b =>
                {
                    b.Property<int>("BaseItemsID")
                        .HasColumnType("int");

                    b.Property<int>("CharacterTypesFGCharacterTypeID")
                        .HasColumnType("int");

                    b.HasKey("BaseItemsID", "CharacterTypesFGCharacterTypeID");

                    b.HasIndex("CharacterTypesFGCharacterTypeID");

                    b.ToTable("FGCharacterTypeFGItem");
                });

            modelBuilder.Entity("FGItemSoldier", b =>
                {
                    b.Property<int>("ItemsID")
                        .HasColumnType("int");

                    b.Property<int>("SoldiersSoldierId")
                        .HasColumnType("int");

                    b.HasKey("ItemsID", "SoldiersSoldierId");

                    b.HasIndex("SoldiersSoldierId");

                    b.ToTable("FGItemSoldier");
                });

            modelBuilder.Entity("FGItemWizard", b =>
                {
                    b.Property<int>("ItemsID")
                        .HasColumnType("int");

                    b.Property<int>("WizardsWizardId")
                        .HasColumnType("int");

                    b.HasKey("ItemsID", "WizardsWizardId");

                    b.HasIndex("WizardsWizardId");

                    b.ToTable("FGItemWizard");
                });

            modelBuilder.Entity("FGWeaponSoldier", b =>
                {
                    b.Property<int>("SoldiersSoldierId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponsID")
                        .HasColumnType("int");

                    b.HasKey("SoldiersSoldierId", "WeaponsID");

                    b.HasIndex("WeaponsID");

                    b.ToTable("FGWeaponSoldier");
                });

            modelBuilder.Entity("FGWeaponWizard", b =>
                {
                    b.Property<int>("WeaponsID")
                        .HasColumnType("int");

                    b.Property<int>("WizardsWizardId")
                        .HasColumnType("int");

                    b.HasKey("WeaponsID", "WizardsWizardId");

                    b.HasIndex("WizardsWizardId");

                    b.ToTable("FGWeaponWizard");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Apprentice", b =>
                {
                    b.Property<int>("ApprenticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprenticeId"), 1L, 1);

                    b.Property<int>("Armour")
                        .HasColumnType("int");

                    b.Property<string>("Backstory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fight")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("Move")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shoot")
                        .HasColumnType("int");

                    b.Property<int>("Will")
                        .HasColumnType("int");

                    b.HasKey("ApprenticeId");

                    b.ToTable("Apprentices");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGArmour", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ArmourMod")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FGArmours");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGCharacterSuperType", b =>
                {
                    b.Property<int>("FGCharacterSuperTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FGCharacterSuperTypeId"), 1L, 1);

                    b.Property<string>("FGCharacterSuperTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FGCharacterSuperTypeId");

                    b.ToTable("FGCharacterSuperTypes");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGCharacterType", b =>
                {
                    b.Property<int>("FGCharacterTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FGCharacterTypeID"), 1L, 1);

                    b.Property<int>("BaseArmour")
                        .HasColumnType("int");

                    b.Property<int>("BaseFight")
                        .HasColumnType("int");

                    b.Property<int>("BaseMaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("BaseMove")
                        .HasColumnType("int");

                    b.Property<int>("BaseShoot")
                        .HasColumnType("int");

                    b.Property<int>("BaseWill")
                        .HasColumnType("int");

                    b.Property<string>("CharacterTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FGArmourID")
                        .HasColumnType("int");

                    b.Property<int>("FGCharacterSuperTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FGWeaponID")
                        .HasColumnType("int");

                    b.HasKey("FGCharacterTypeID");

                    b.HasIndex("FGArmourID");

                    b.HasIndex("FGCharacterSuperTypeId");

                    b.HasIndex("FGWeaponID");

                    b.ToTable("FGCharacterTypes");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGInjury", b =>
                {
                    b.Property<int>("FGInjuryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FGInjuryId"), 1L, 1);

                    b.Property<int?>("ApprenticeId")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InjuryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SoldierId")
                        .HasColumnType("int");

                    b.Property<int?>("WizardId")
                        .HasColumnType("int");

                    b.HasKey("FGInjuryId");

                    b.HasIndex("ApprenticeId");

                    b.HasIndex("SoldierId");

                    b.HasIndex("WizardId");

                    b.ToTable("FGInjuries");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WarbandId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WarbandId");

                    b.ToTable("FGItems");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGWeapon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("DamageMod")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FGWeapons");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Homebase", b =>
                {
                    b.Property<int>("HomebaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomebaseId"), 1L, 1);

                    b.Property<string>("BaseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BaseTypeHomebaseTypeId")
                        .HasColumnType("int");

                    b.HasKey("HomebaseId");

                    b.HasIndex("BaseTypeHomebaseTypeId");

                    b.ToTable("Homebases");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.HomebaseType", b =>
                {
                    b.Property<int>("HomebaseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomebaseTypeId"), 1L, 1);

                    b.Property<string>("BaseTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseTypePower")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HomebaseTypeId");

                    b.ToTable("HomebaseTypes");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Soldier", b =>
                {
                    b.Property<int>("SoldierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoldierId"), 1L, 1);

                    b.Property<string>("Ability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Armour")
                        .HasColumnType("int");

                    b.Property<string>("Backstory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fight")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("Move")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shoot")
                        .HasColumnType("int");

                    b.Property<int?>("WarbandId")
                        .HasColumnType("int");

                    b.Property<int>("Will")
                        .HasColumnType("int");

                    b.Property<int>("characterTypeFGCharacterTypeID")
                        .HasColumnType("int");

                    b.HasKey("SoldierId");

                    b.HasIndex("WarbandId");

                    b.HasIndex("characterTypeFGCharacterTypeID");

                    b.ToTable("Soldiers");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellId"), 1L, 1);

                    b.Property<int>("CastingNumber")
                        .HasColumnType("int");

                    b.Property<string>("SpellDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SpellType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpellId");

                    b.HasIndex("SpellSchoolId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.SpellSchool", b =>
                {
                    b.Property<int>("SpellSchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellSchoolId"), 1L, 1);

                    b.Property<string>("SpellSchoolDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpellSchoolId");

                    b.ToTable("SpellSchools");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Warband", b =>
                {
                    b.Property<int>("WarbandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarbandId"), 1L, 1);

                    b.Property<int?>("ApprenticeId")
                        .HasColumnType("int");

                    b.Property<int?>("HomebaseId")
                        .HasColumnType("int");

                    b.Property<int>("Treasury")
                        .HasColumnType("int");

                    b.Property<string>("WarbandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarbandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WizardId")
                        .HasColumnType("int");

                    b.HasKey("WarbandId");

                    b.HasIndex("ApprenticeId");

                    b.HasIndex("HomebaseId");

                    b.HasIndex("WizardId");

                    b.ToTable("Warbands");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Wizard", b =>
                {
                    b.Property<int>("WizardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WizardId"), 1L, 1);

                    b.Property<int>("Armour")
                        .HasColumnType("int");

                    b.Property<string>("Backstory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("Fight")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("Move")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shoot")
                        .HasColumnType("int");

                    b.Property<int>("SpellSchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Will")
                        .HasColumnType("int");

                    b.HasKey("WizardId");

                    b.HasIndex("SpellSchoolId");

                    b.ToTable("Wizards");
                });

            modelBuilder.Entity("SpellWizard", b =>
                {
                    b.Property<int>("KnownSpellsSpellId")
                        .HasColumnType("int");

                    b.Property<int>("WizardsWizardId")
                        .HasColumnType("int");

                    b.HasKey("KnownSpellsSpellId", "WizardsWizardId");

                    b.HasIndex("WizardsWizardId");

                    b.ToTable("SpellWizard");
                });

            modelBuilder.Entity("ApprenticeFGArmour", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Apprentice", null)
                        .WithMany()
                        .HasForeignKey("ApprenticesApprenticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGArmour", null)
                        .WithMany()
                        .HasForeignKey("ArmoursID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApprenticeFGItem", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Apprentice", null)
                        .WithMany()
                        .HasForeignKey("ApprenticesApprenticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGItem", null)
                        .WithMany()
                        .HasForeignKey("ItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApprenticeFGWeapon", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Apprentice", null)
                        .WithMany()
                        .HasForeignKey("ApprenticesApprenticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGWeapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FGArmourSoldier", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGArmour", null)
                        .WithMany()
                        .HasForeignKey("ArmoursID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Soldier", null)
                        .WithMany()
                        .HasForeignKey("SoldiersSoldierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FGArmourWizard", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGArmour", null)
                        .WithMany()
                        .HasForeignKey("ArmoursID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Wizard", null)
                        .WithMany()
                        .HasForeignKey("WizardsWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FGCharacterTypeFGItem", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGItem", null)
                        .WithMany()
                        .HasForeignKey("BaseItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGCharacterType", null)
                        .WithMany()
                        .HasForeignKey("CharacterTypesFGCharacterTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FGItemSoldier", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGItem", null)
                        .WithMany()
                        .HasForeignKey("ItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Soldier", null)
                        .WithMany()
                        .HasForeignKey("SoldiersSoldierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FGItemWizard", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGItem", null)
                        .WithMany()
                        .HasForeignKey("ItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Wizard", null)
                        .WithMany()
                        .HasForeignKey("WizardsWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FGWeaponSoldier", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Soldier", null)
                        .WithMany()
                        .HasForeignKey("SoldiersSoldierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGWeapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FGWeaponWizard", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGWeapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Wizard", null)
                        .WithMany()
                        .HasForeignKey("WizardsWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGCharacterType", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGArmour", null)
                        .WithMany("CharacterTypes")
                        .HasForeignKey("FGArmourID");

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGCharacterSuperType", "FGCharacterSuperType")
                        .WithMany("MyProperty")
                        .HasForeignKey("FGCharacterSuperTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGWeapon", null)
                        .WithMany("CharacterTypes")
                        .HasForeignKey("FGWeaponID");

                    b.Navigation("FGCharacterSuperType");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGInjury", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Apprentice", null)
                        .WithMany("Injuries")
                        .HasForeignKey("ApprenticeId");

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Soldier", null)
                        .WithMany("Injuries")
                        .HasForeignKey("SoldierId");

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Wizard", null)
                        .WithMany("Injuries")
                        .HasForeignKey("WizardId");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGItem", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Warband", null)
                        .WithMany("Vault")
                        .HasForeignKey("WarbandId");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Homebase", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.HomebaseType", "BaseType")
                        .WithMany()
                        .HasForeignKey("BaseTypeHomebaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseType");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Soldier", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Warband", null)
                        .WithMany("Soldiers")
                        .HasForeignKey("WarbandId");

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.FGCharacterType", "characterType")
                        .WithMany()
                        .HasForeignKey("characterTypeFGCharacterTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("characterType");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Spell", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.SpellSchool", "SpellSchool")
                        .WithMany("Spells")
                        .HasForeignKey("SpellSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpellSchool");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Warband", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Apprentice", "Apprentice")
                        .WithMany()
                        .HasForeignKey("ApprenticeId");

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Homebase", "Homebase")
                        .WithMany()
                        .HasForeignKey("HomebaseId");

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Wizard", "Wizard")
                        .WithMany()
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apprentice");

                    b.Navigation("Homebase");

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Wizard", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.SpellSchool", "SpellSchool")
                        .WithMany()
                        .HasForeignKey("SpellSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpellSchool");
                });

            modelBuilder.Entity("SpellWizard", b =>
                {
                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Spell", null)
                        .WithMany()
                        .HasForeignKey("KnownSpellsSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraveTracker.Areas.Frostgrave.Models.Wizard", null)
                        .WithMany()
                        .HasForeignKey("WizardsWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Apprentice", b =>
                {
                    b.Navigation("Injuries");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGArmour", b =>
                {
                    b.Navigation("CharacterTypes");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGCharacterSuperType", b =>
                {
                    b.Navigation("MyProperty");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.FGWeapon", b =>
                {
                    b.Navigation("CharacterTypes");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Soldier", b =>
                {
                    b.Navigation("Injuries");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.SpellSchool", b =>
                {
                    b.Navigation("Spells");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Warband", b =>
                {
                    b.Navigation("Soldiers");

                    b.Navigation("Vault");
                });

            modelBuilder.Entity("GraveTracker.Areas.Frostgrave.Models.Wizard", b =>
                {
                    b.Navigation("Injuries");
                });
#pragma warning restore 612, 618
        }
    }
}
